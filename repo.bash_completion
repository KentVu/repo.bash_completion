# -*- mode: sh; -*-

declare -A CMD_HANDLERS
CMD_HANDLERS=(
    ["init"]=_repo_init
    ["help"]=_repo_help
    ["abandon"]=_repo_abandon
    ["branch"]=_repo_branch
    ["branches"]=_repo_branches
    ["checkout"]=_repo_checkout
    ["cherry-pick"]=_repo_cherry_pick
    ["diff"]=_repo_diff
    ["download"]=_repo_download
    ["forall"]=_repo_forall
    ["grep"]=_repo_grep
    ["list"]=_repo_list
    ["prune"]=_repo_prune
    ["rebase"]=_repo_rebase
    ["selfupdate"]=_repo_selfupdate
    ["smartsync"]=_repo_smartsync
    ["stage"]=_repo_stage
    ["start"]=_repo_start
    ["status"]=_repo_status
    ["status"]=_repo_sync
    ["upload"]=_repo_upload
    ["version"]=_repo_version
)

# To be populated by command handlers.
declare -a OPTIONS
declare -A ARG_OPTIONS

# All possible completions for the context.
declare -a COMPLETIONS

_find_repo() {
    local dir=$(pwd)
    local found=1

    while [ "${dir}" != / ]
    do
        if [ -f "${dir}/.repo/repo/main.py" ]
        then
            found=0
            break
        fi

        dir=$(cd "${dir}/.." && pwd)
    done

    return ${found}
}

_strip_colors () {
    # taken from http://goo.gl/7KlLZ
    sed -r "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g"
}

_no_completion() {
    true
}

_branch_completion() {
    local raw_branches

    # separate statement required to be able to access exit code
    raw_branches=$(repo branches 2>/dev/null)

    if [ $? -eq 0 ]
    then
        local branches=$(
            echo "${raw_branches}" |
            _strip_colors | awk 'BEGIN { FS="|" } { print $1 }' | cut -c 3-
        )

        COMPLETIONS=( ${branches} )
    fi
}

_is_option() {
    local opt="$1"

    [[ "${opt}" == -* ]]
}

_expects_arg() {
    local opt="$1"

    if [[ ${ARG_OPTIONS[$opt]} ]]
    then
        return 0
    else
        return 1
    fi
}

_handle_options() {
    local curr="${COMP_WORDS[COMP_CWORD]}"
    local prev="${COMP_WORDS[COMP_CWORD - 1]}"

    if _expects_arg "${prev}"
    then
        local handler=${ARG_OPTIONS[$prev]}
        eval ${handler} "${curr}"
    elif _is_option "${curr}"
    then
        COMPLETIONS=( ${OPTIONS[@]} ${!ARG_OPTIONS[*]} )
    fi

    return 0
}

_repo_init() {
    OPTIONS=(
        "-h" "--help"
        "-q" "--quite"
        "--mirror"
        "--no-repo-verify"
    )

    ARG_OPTIONS=(
        ["-u"]=_no_completion
        ["--manifest-url"]=_no_completion
        ["-b"]=_no_completion
        ["--manifest-branch"]=_no_completion
        ["-m"]=_no_completion
        ["--manifest-name"]=_no_completion
        ["--reference"]=_no_completion
        ["--repo-url"]=_no_completion
        ["--repo-branch"]=_no_completion
    )

    _handle_options
}

_repo_help() {
    OPTIONS=(
        "-a" "--all"
        "-h" "--help"
    )

    ARG_OPTIONS=()

    _handle_options
}

_repo_abandon() {
    OPTIONS=(
        "-h" "--help"
    )

    ARG_OPTIONS=()

    _handle_options
}

_repo_branch() {
    OPTIONS=(
        "-h" "--help"
    )

    ARG_OPTIONS=()

    _handle_options
}

_repo_branches() {
    OPTIONS=(
        "-h" "--help"
    )

    ARG_OPTIONS=()

    _handle_options
}

_repo_checkout() {
    OPTIONS=(
        "-h" "--help"
    )

    ARG_OPTIONS=()

    _handle_options
}

_repo_cherry_pick() {
    OPTIONS=(
        "-h" "--help"
    )

    ARG_OPTIONS=()

    _handle_options
}

_repo_diff() {
    OPTIONS=(
        "-h" "--help"
    )

    ARG_OPTIONS=()

    _handle_options
}

_repo_download() {
    OPTIONS=(
        "-h" "--help"
    )

    ARG_OPTIONS=()

    _handle_options
}

_repo_forall() {
    OPTIONS=(
        "-h" "--help"
        "-p"
        "-v" "--verbose"
    )

    ARG_OPTIONS=(
        ["-c"]=_no_completion
        ["--command"]=_no_completion
    )

    # TODO: options must be context sensitive here
    _handle_options
}

_repo_grep() {
    OPTIONS=(
        "-h" "--help"
        "--cached"
        "-r" "--revision"
        "-i" "--ignore-case"
        "-a" "--text"
        "-I"
        "-w" "--word-regexp"
        "-v" "--invert-match"
        "-G" "--basic-regexp"
        "-E" "--extended-regexp"
        "-F" "--fixed-strings"
        "--all-match"
        "--and" "--or" "--not"
        "-(" "-)"
        "-n"
        "-l" "--name-only" "--files-with-matches"
        "-L" "--files-without-match"
    )

    ARG_OPTIONS=(
        ["-e"]=_no_completion
        ["-C"]=_no_completion
        ["-B"]=_no_completion
        ["-A"]=_no_completion
    )

    _handle_options
}

_repo_list() {
    OPTIONS=(
        "-h" "--help"
    )

    ARG_OPTIONS=()

    _handle_options
}

_repo_prune() {
    OPTIONS=(
        "-h" "--help"
    )

    ARG_OPTIONS=()

    _handle_options
}

_repo_rebase() {
    OPTIONS=(
        "-h" "--help"
        "-i" "--interactive"
        "-f" "--force-rebase"
        "--no-ff"
        "-q" "--quiet"
        "--autosquash"
    )

    ARG_OPTIONS=(
        ["--whitespace"]=_no_completion
    )

    _handle_options
}

_repo_selfupdate() {
    OPTIONS=(
        "-h" "--help"
        "--no-repo-verify"
    )

    ARG_OPTIONS=()

    _handle_options
}

_repo_smartsync() {
    OPTIONS=(
        "-h" "--help"
        "-f" "--force-broken"
        "-l" "--local-only"
        "-n" "--network-only"
        "-d" "--detach"
        "-q" "--quiet"
        "--no-repo-verify"
    )

    ARG_OPTIONS=(
        ["-j"]=_no_completion
        ["--jobs"]=_no_completion

    )

    _handle_options
}

_repo_stage() {
    OPTIONS=(
        "-h" "--help"
        "-i" "--interactive"
    )

    ARG_OPTIONS=()

    _handle_options
}

_repo_start() {
    OPTIONS=(
        "-h" "--help"
        "--all"
    )

    ARG_OPTIONS=()

    _handle_options
}

_repo_status() {
    OPTIONS=(
        "-h" "--help"
    )

    ARG_OPTIONS=(
        ["-j"]=_no_completion
        ["--jobs"]=_no_completion
    )

    _handle_options
}

_repo_sync() {
    OPTIONS=(
        "-h" "--help"
        "-f" "--force-broken"
        "-l" "--local-only"
        "-n" "--network-only"
        "-d" "--detach"
        "-q" "--quiet"
        "-s" "--smart-sync"
        "--no-repo-verify"
    )

    ARG_OPTIONS=(
        ["-j"]=_no_completion
        ["--jobs"]=_no_completion
    )

    _handle_options
}

_repo_upload() {
    OPTIONS=(
        "-h" "--help"
        "-t"
        "--no-verify"
        "--verify"
    )

    ARG_OPTIONS=(
        ["--re"]=_no_completion
        ["--reviewers"]=_no_completion
        ["--cc"]=_no_completion
        ["--br"]=_branch_completion
    )

    _handle_options
}

_repo_version() {
    OPTIONS=(
        "-h" "--help"
    )

    ARG_OPTIONS=()

    _handle_options
}

_repo() {
    local curr="${COMP_WORDS[COMP_CWORD]}"

    COMPLETIONS=()

    if [ ${COMP_CWORD} -eq 1 ]
    then
        local cmds

        if _find_repo
        then
            cmds=("abandon" "branch" "branches" "checkout" "cherry-pick" "diff"
                "download" "forall" "grep" "help" "init" "list" "prune" "rebase"
                "selfupdate" "smartsync" "stage" "start" "status" "sync"
                "upload" "version")
        else
            cmds=("help" "init")
        fi

        COMPLETIONS=( ${cmds[@]} )
    else
        local cmd=${COMP_WORDS[1]}
        local handler=${CMD_HANDLERS["${cmd}"]}
        if [ -n ${handler} ]
        then
            eval ${handler}
        fi
    fi

    COMPREPLY=( $(compgen -W "${COMPLETIONS[*]}" -- ${curr}) )

    return 0
}

complete -F _repo repo
